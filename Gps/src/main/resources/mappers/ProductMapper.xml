<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ProductMapper">
	<!-- product 기본 글쓰기 -->
	<insert id="productWrite" parameterType="com.game.product.ProductDTO">
		insert into product values(product_seq.nextval, #{pro_title}, #{pro_contents}, 0, #{price}, 0, 0, #{top_category}, #{sub_category}, 'empty', #{millage}, #{company})	
		
		 <!-- pro_num 가져오기 (Pro_file TABLE) -->
		<selectKey keyProperty="pro_num" resultType="int" order="AFTER">
			select product_seq.currval from dual
		</selectKey>
	</insert>
	
	
	<!-- pro_file 글쓰기(사진넣기) -->
	<insert id="pro_fileWrite" parameterType="java.util.Map">
		insert into pro_file values(pro_file_seq.nextval, #{pro_num}, #{file_name}, #{origine}, '1')
	</insert>
	
	<!-- pro_list 글리스트 -->
	<select id="pro_list" resultType="com.game.product.ProductDTO" parameterType="com.game.util.PageMaker">
		select * from 
		(select rownum R, F.* from 
		(select * from product order by pro_num desc) F) 
		where R between #{startRowNum} and #{lastRowNum}
	</select>
	
	<!-- pro_list 글전체 갯수 가져오기 -->
	<select id="pro_boardCount" resultType="int">
		select count(pro_num) from product
	</select>
	
	<!-- pro_list에 들어갈 대표사진 가져오기  -->
	<select id="pro_main_Img" resultType="com.game.product.ProductFileDTO" parameterType="int">
		select file_name from pro_file
    	where file_num=(select min(file_num) from pro_file where pro_num=#{pro_num}) 
	</select>
	
	<!-- pro_view -->
	<select id="productView" resultType="com.game.product.ProductDTO" parameterType="int">
		select * from product where pro_num=#{pro_num}
	</select>
	

	
	<!-- pro_view에 들어갈 사진 PageMaker까지-->
	<select id="pro_view_img" resultType="com.game.product.ProductFileDTO" parameterType="java.util.Map">
		select * from 
		(select rownum r, F.* from 
		(select FILE_NAME from PRO_FILE where pro_num=#{pro_num}) F) 
		where R between #{pageMaker.startRowNum} and #{pageMaker.lastRowNum}+4
	</select>
	
	
	<!-- pro_view에 들어갈 사진 갯수 -->
	<select id="pro_view_img_count" resultType="int" parameterType="int">
		select count(File_name) from pro_file where pro_num=#{pro_num}
	</select>
	
	<!-- pro_patch파일 -->
	<select id="pro_view_patch" resultType="com.game.product.PatchDTO" parameterType="int">
		select * from pro_patch where pro_num=#{pro_num}
	</select>
	
	
	<!-- pro_mod에서 뿌리는 모든 사진 (PageMaker X) -->
	<select id="pro_mod_img" resultType="com.game.product.ProductFileDTO" parameterType="int">
		select * from PRO_FILE where pro_num=#{pro_num} order by file_num asc
	</select>
	
	<!-- check된거 삭제할 때 -->
	<delete id="pro_mod_del_img" parameterType="java.util.Map">
		delete pro_file where file_num=#{file_num}
	</delete>
	
	<!-- Mod에서 이미지 추가 -->
	<insert id="pro_mod_add_img" parameterType="java.util.Map">
		insert into pro_file values(pro_file_seq.nextval, #{pro_num}, #{file_name}, #{origine}, '1')
	</insert>
	
	<!-- Mod에서 패치파일 추가 -->
	<insert id="pro_mod_add_patch" parameterType="java.util.Map">
		insert into pro_patch values(pro_patch_seq.nextval, #{pro_num}, #{patch_file_name}, #{patch_origine_name})
	</insert>
	
	<!-- Mod에서 내용 수정 -->
	<update id="pro_mod" parameterType="com.game.product.ProductDTO">
		update product set pro_title=#{pro_title}, pro_contents=#{pro_contents}, price=#{price}, total_price=#{total_price}, 
		discount=#{discount}, top_category=#{top_category}, sub_category=#{sub_category}, millage=#{millage},company=#{company}  where pro_num=#{pro_num}
	</update>
	
	<!-- product 삭제 -->
	<delete id="pro_del" parameterType="int">
		delete from product where pro_num=#{pro_num}
	</delete>
	
	<!-- 카테고리별 리스트 뿌리기 시작 -->
	<select id="pro_list_category" resultType="com.game.product.ProductDTO" parameterType="java.util.Map">
		select * from 
		(select rownum R, F.* from 
		(select * from product where top_category=#{top_category} order by pro_num desc) F) 
		where R between #{pageMaker.startRowNum} and #{pageMaker.lastRowNum}
	</select>
	
	<!-- 카테고리 글 갯수 -->
	<select id="pro_boardCount_category" resultType="int" parameterType="java.lang.String">
		select count(pro_num) from product where top_category=#{top_category}
	</select>
	<!-- 카테고리별 리스트 뿌리기 끝 -->
	
	<!-- 평점 평균 나오게 하기-->
	<select id="score" resultType="com.game.product.ReplyDTO" parameterType="int">
		<![CDATA[
			select r_score from reply where pro_num = #{pro_num} order by r_num desc
		]]>
	</select>
	<!-- 평점 최신화 -->
	<update id="total_score" parameterType="java.util.Map">
		update product set total_score=#{total_score} where pro_num=#{pro_num}
	</update>
	
	<!-- 제목 검색하기 시작 -->
	<!-- 제목 검색 리스트 뿌리기 -->
	<select id="productList_search" resultType="com.game.product.ProductDTO" parameterType="java.util.Map">
		select * from 
		(select rownum R, F.* from 
		(select * from product where pro_title like '%'||#{pro_title}||'%' order by pro_num desc) F) 
		where R between #{pageMaker.startRowNum} and #{pageMaker.lastRowNum}
	</select>
	
	<!-- 제목 검색 글 갯수 -->
	<select id="pro_boardCount_search" resultType="int" parameterType="java.lang.String">
		select count(pro_num) from product where pro_title like '%'||#{pro_title}||'%'
	</select>
	<!-- 제목 검색하기 끝 -->
	
	<!-- ************************************************************************************************************** -->
	<!-- pro_list ((최신순)) -->
	<select id="pro_list_recent" resultType="com.game.product.ProductDTO" parameterType="com.game.util.PageMaker">
		select * from 
		(select rownum R, F.* from 
		(select * from product order by pro_num desc) F) 
		where R between #{startRowNum} and #{lastRowNum}
	</select>
	
	<!-- pro_list ((이름순)) -->
	<select id="pro_list_name" resultType="com.game.product.ProductDTO" parameterType="com.game.util.PageMaker">
		select * from 
		(select rownum R, F.* from 
		(select * from product order by pro_title asc) F) 
		where R between #{startRowNum} and #{lastRowNum}
	</select>
	
	<!-- pro_list ((평점순)) -->
	<select id="pro_list_score" resultType="com.game.product.ProductDTO" parameterType="com.game.util.PageMaker">
		select * from 
		(select rownum R, F.* from 
		(select * from product order by total_score desc) F) 
		where R between #{startRowNum} and #{lastRowNum}
	</select>
	
	<!-- pro_list ((높은 가격순)) -->
	<select id="pro_list_high" resultType="com.game.product.ProductDTO" parameterType="com.game.util.PageMaker">
		select * from 
		(select rownum R, F.* from 
		(select * from product order by total_price desc) F) 
		where R between #{startRowNum} and #{lastRowNum}
	</select>
	
	<!-- pro_list ((낮은 가격순)) -->
	<select id="pro_list_low" resultType="com.game.product.ProductDTO" parameterType="com.game.util.PageMaker">
		select * from 
		(select rownum R, F.* from 
		(select * from product order by total_price asc) F) 
		where R between #{startRowNum} and #{lastRowNum}
	</select>
	
	<!-- ********************************************************************************************** -->
	
	<!-- 카테고리별 리스트 뿌리기 시작 ((최신순)) -->
	<select id="pro_list_category_recent" resultType="com.game.product.ProductDTO" parameterType="java.util.Map">
		select * from 
		(select rownum R, F.* from 
		(select * from product where top_category=#{top_category} order by pro_num desc) F) 
		where R between #{pageMaker.startRowNum} and #{pageMaker.lastRowNum}
	</select>
	
	
	<!-- 카테고리별 리스트 뿌리기 시작  ((이름순)) -->
	<select id="pro_list_category_name" resultType="com.game.product.ProductDTO" parameterType="java.util.Map">
		select * from 
		(select rownum R, F.* from 
		(select * from product where top_category=#{top_category} order by pro_title asc) F) 
		where R between #{pageMaker.startRowNum} and #{pageMaker.lastRowNum}
	</select>
	
	<!-- 카테고리별 리스트 뿌리기 시작  ((평점순)) -->
	<select id="pro_list_category_score" resultType="com.game.product.ProductDTO" parameterType="java.util.Map">
		select * from 
		(select rownum R, F.* from 
		(select * from product where top_category=#{top_category} order by total_score desc) F) 
		where R between #{pageMaker.startRowNum} and #{pageMaker.lastRowNum}
	</select>
	
	<!-- 카테고리별 리스트 뿌리기 시작  ((높은 가격순)) -->
	<select id="pro_list_category_high" resultType="com.game.product.ProductDTO" parameterType="java.util.Map">
		select * from 
		(select rownum R, F.* from 
		(select * from product where top_category=#{top_category} order by total_price desc) F) 
		where R between #{pageMaker.startRowNum} and #{pageMaker.lastRowNum}
	</select>
	
	<!-- 카테고리별 리스트 뿌리기 시작  ((낮은 가격순)) -->
	<select id="pro_list_category_low" resultType="com.game.product.ProductDTO" parameterType="java.util.Map">
		select * from 
		(select rownum R, F.* from 
		(select * from product where top_category=#{top_category} order by total_price asc) F) 
		where R between #{pageMaker.startRowNum} and #{pageMaker.lastRowNum}
	</select>
	<!-- 카테고리별 리스트 뿌리기 끝 -->
	
	
	<!-- *******************************************************************************************8 -->
	<!-- 좋아요로 메인에서 뿌리기 -->
	<select id="pro_main_like" resultType="com.game.product.ProductDTO" parameterType="com.game.util.PageMaker">
		select * from 
		(select rownum R, F.* from 
		(select * from product order by total_score desc) F) 
		where R between 1 and 12
	</select>
	
	<!-- 최신순으로 메인에서 뿌리기 -->
	<select id="pro_main_recent" resultType="com.game.product.ProductDTO" parameterType="com.game.util.PageMaker">
		select * from 
		(select rownum R, F.* from 
		(select * from product order by pro_num desc) F) 
		where R between 1 and 12
	</select>
	
	<!-- 초특가 -->
	<select id="pro_sub_discount" resultType="com.game.product.ProductDTO" parameterType="com.game.util.PageMaker">
		select * from 
		(select rownum R, F.* from 
		(select * from product order by discount desc) F) 
		where R between 1 and 5
	</select>
	
	<!-- 이미지 4개 뿌리기 -->
	<select id="pro_view_img_main" resultType="com.game.product.ProductFileDTO" parameterType="java.util.Map">
		select * from 
		(select rownum r, F.* from 
		(select FILE_NAME from PRO_FILE where pro_num=#{pro_num}) F) 
		where R between 1 and 4
	</select>
</mapper>

